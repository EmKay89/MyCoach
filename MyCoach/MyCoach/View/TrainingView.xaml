<UserControl x:Class="MyCoach.View.TrainingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:MyCoach.View"
             xmlns:viewmodels="clr-namespace:MyCoach.ViewModel"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             mc:Ignorable="d"
             d:DesignHeight="450"
             d:DesignWidth="800">
    <UserControl.Resources>
        <Style TargetType="Button"
               x:Key="StartStopButton"
               BasedOn="{StaticResource DefaultButton}">
            <Setter Property="Content"
                    Value="Start" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding TrainingActive}"
                             Value="True">
                    <Setter Property="Content"
                            Value="Stop" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Storyboard x:Key="ShowTrainingSettings">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)"
                                           Storyboard.TargetName="stackPanel">
                <EasingDoubleKeyFrame KeyTime="0:0:0.5"
                                      Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <BackEase EasingMode="EaseOut" />
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
                <EasingDoubleKeyFrame KeyTime="0:0:1"
                                      Value="290">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <BackEase EasingMode="EaseOut" />
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                           Storyboard.TargetName="stackPanel">
                <EasingDoubleKeyFrame KeyTime="0:0:0.5"
                                      Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:1"
                                      Value="1" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="HideTrainingSettings">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)"
                                           Storyboard.TargetName="stackPanel">
                <EasingDoubleKeyFrame KeyTime="0:0:0.4"
                                      Value="290" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.8"
                                      Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <BackEase EasingMode="EaseIn" />
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                           Storyboard.TargetName="stackPanel">
                <EasingDoubleKeyFrame KeyTime="0:0:0.4"
                                      Value="1" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.8"
                                      Value="0" />
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
    </UserControl.Resources>
    <!--The following code is an alternative way to start the animations based on TrainingActive.
    The drawback is that the animation ShowTrainingSettings always started when the UserControl
    was loaded and not only when a property changed. Two NuGet packs were installed for this.
    <i:Interaction.Triggers>
        <ei:DataTrigger Binding="{Binding TrainingActive, Mode=OneWay}" Value="True">
            <ei:ControlStoryboardAction Storyboard="{StaticResource HideTrainingSettings}" ControlStoryboardOption="Play"/>
        </ei:DataTrigger>
        <ei:DataTrigger Binding="{Binding TrainingActive, Mode=OneWay}" Value="False">
            <ei:ControlStoryboardAction Storyboard="{StaticResource ShowTrainingSettings}" ControlStoryboardOption="Play"/>
        </ei:DataTrigger>
    </i:Interaction.Triggers>-->
    <DockPanel>
        <StackPanel Margin="5,0,0,0"
                    DockPanel.Dock="Bottom"
                    Orientation="Horizontal">
            <Button Command="{Binding StartTrainingCommand}"
                    Style="{StaticResource StartStopButton}" />
            <Button Content="Timer"
                    Click="TimerButton_Click" />
        </StackPanel>
        <StackPanel x:Name="stackPanel"
                    DockPanel.Dock="Right"
                    Width="290">
            <StackPanel>
                <Label Content="Modus"
                       Style="{StaticResource Headline}" />
                <StackPanel Orientation="Horizontal">
                    <ComboBox HorizontalAlignment="Left"
                              Margin="15,0,0,0"
                              ItemsSource="{Binding ModesWithCaption}"
                              SelectedValue="{Binding TrainingMode}"
                              DisplayMemberPath="Value"
                              SelectedValuePath="Key"
                              IsEnabled="{Binding TrainingSettingsEnabled}" />
                    <Image Source="/Resources/QuestionIcon.jpg"
                           Stretch="None"
                           Margin="10,0,0,0"
                           ToolTipService.ShowDuration="30000"
                           ToolTipService.InitialShowDelay="300"
                           Cursor="Help">
                        <Image.ToolTip>
                            <ToolTip Width="600">
                                <TextBlock Text="{Binding ModeExplanation}"
                                           TextWrapping="WrapWithOverflow" />
                            </ToolTip>
                        </Image.ToolTip>
                    </Image>
                </StackPanel>
                <ContentControl Content="{Binding SelectedViewModel}" />
            </StackPanel>
        </StackPanel>
        <ItemsControl BorderBrush="LightGray"
                      BorderThickness="1"
                      Margin="10"
                      ItemsSource="{Binding Training}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <local:TrainingElementView />
                    </Grid>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DockPanel>
</UserControl>
